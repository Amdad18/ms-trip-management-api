/*
 * This file is generated by jOOQ.
 */
package org.devp.trip.model.tables;


import java.time.LocalDateTime;

import org.devp.trip.model.TripManagement;
import org.devp.trip.model.enums.TripsStatus;
import org.devp.trip.model.tables.records.TripsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trips extends TableImpl<TripsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trip_management.trips</code>
     */
    public static final Trips TRIPS = new Trips();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TripsRecord> getRecordType() {
        return TripsRecord.class;
    }

    /**
     * The column <code>trip_management.trips.user_id</code>.
     */
    public final TableField<TripsRecord, ULong> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>trip_management.trips.transporter_id</code>.
     */
    public final TableField<TripsRecord, ULong> TRANSPORTER_ID = createField(DSL.name("transporter_id"), SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>trip_management.trips.pickup_location</code>.
     */
    public final TableField<TripsRecord, String> PICKUP_LOCATION = createField(DSL.name("pickup_location"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>trip_management.trips.dropoff_location</code>.
     */
    public final TableField<TripsRecord, String> DROPOFF_LOCATION = createField(DSL.name("dropoff_location"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>trip_management.trips.others_info</code>.
     */
    public final TableField<TripsRecord, String> OTHERS_INFO = createField(DSL.name("others_info"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>trip_management.trips.created_at</code>.
     */
    public final TableField<TripsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>trip_management.trips.updated_at</code>.
     */
    public final TableField<TripsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>trip_management.trips.status</code>.
     */
    public final TableField<TripsRecord, TripsStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(9).nullable(false).asEnumDataType(org.devp.trip.model.enums.TripsStatus.class), this, "");

    /**
     * The column <code>trip_management.trips.pickup_lat_lng</code>.
     */
    public final TableField<TripsRecord, String> PICKUP_LAT_LNG = createField(DSL.name("pickup_lat_lng"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>trip_management.trips.dropoff_lat_lng</code>.
     */
    public final TableField<TripsRecord, String> DROPOFF_LAT_LNG = createField(DSL.name("dropoff_lat_lng"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>trip_management.trips.id</code>.
     */
    public final TableField<TripsRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private Trips(Name alias, Table<TripsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Trips(Name alias, Table<TripsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>trip_management.trips</code> table reference
     */
    public Trips(String alias) {
        this(DSL.name(alias), TRIPS);
    }

    /**
     * Create an aliased <code>trip_management.trips</code> table reference
     */
    public Trips(Name alias) {
        this(alias, TRIPS);
    }

    /**
     * Create a <code>trip_management.trips</code> table reference
     */
    public Trips() {
        this(DSL.name("trips"), null);
    }

    public <O extends Record> Trips(Table<O> child, ForeignKey<O, TripsRecord> key) {
        super(child, key, TRIPS);
    }

    @Override
    public Schema getSchema() {
        return TripManagement.TRIP_MANAGEMENT;
    }

    @Override
    public Trips as(String alias) {
        return new Trips(DSL.name(alias), this);
    }

    @Override
    public Trips as(Name alias) {
        return new Trips(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Trips rename(String name) {
        return new Trips(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Trips rename(Name name) {
        return new Trips(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<ULong, ULong, String, String, String, LocalDateTime, LocalDateTime, TripsStatus, String, String, ULong> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
